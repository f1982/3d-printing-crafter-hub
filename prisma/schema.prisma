generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./data.db"
}

// model Metadata {
//   id          Int     @id @default(autoincrement())
//   title       String?
//   description String?
//   keywords    String?
//   // You can add more fields as needed

//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @default(now()) @updatedAt
// }

model Category {
  id          Int     @id @default(autoincrement())
  slug        String  @unique
  title       String
  description String?

  posts Post[]
  tags  Tag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  groupId Int?
  Group   CategoryGroup? @relation(fields: [groupId], references: [id])
}

model CategoryGroup {
  id          Int     @id @default(autoincrement())
  title       String
  description String?

  categories Category[]
}

model Post {
  id   Int    @id @default(autoincrement())
  slug String @unique

  title       String
  description String?
  keywords    String

  thumbnail String?
  content   String?
  url       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  tags Tag[]
  Vote Vote[]
}

model Tag {
  id    Int    @id @default(autoincrement())
  slug  String @unique
  title String

  posts Post[]

  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
}

model Vote {
  id        Int      @id @default(autoincrement())
  value     Int // 1 for upvote, -1 for downvote
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  clientId  String? // Unique identifier for anonymous users
  createdAt DateTime @default(now())

  @@unique([clientId, postId]) // Ensure an anonymous user can only vote once per post
}
